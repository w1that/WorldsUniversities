{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport UniversityService from \"../../service/UniversityService\";\nconst universityService = new UniversityService();\nexport const getUniversitiesAsync = createAsyncThunk(\"universities/getUniversitiesAsync\", async (country = 'Turkey') => {\n  if (country === 'United States of America') {\n    const response = await universityService.getUniversitiesByCountry('United States');\n    return await response.data;\n  }\n\n  if (country === 'United Kingdom of Great Britain and Northern Ireland') {\n    const response = await universityService.getUniversitiesByCountry('United Kingdom');\n    return await response.data;\n  }\n\n  const response = await universityService.getUniversitiesByCountry(country);\n  return await response.data;\n});\nexport const universitiesSlice = createSlice({\n  name: \"universities\",\n  initialState: {\n    items: [],\n    isLoading: false\n  },\n  reducers: {\n    add: (state, action) => {\n      state.items.push(action.payload);\n    }\n  },\n  extraReducers: {\n    //get universities\n    [getUniversitiesAsync.fulfilled]: (state, action) => {\n      state.items = action.payload; //buradaki action response'dan dönen data ile ilgili\n\n      state.isLoading = false;\n    },\n    [getUniversitiesAsync.pending]: (state, action) => {\n      state.isLoading = true; //buradaki action response'dan dönen data ile ilgili\n    }\n  }\n});\nexport const {} = universitiesSlice.actions;\nexport default universitiesSlice.reducer;","map":{"version":3,"sources":["C:/reactcamp/react-tutorial/src/redux/universities/universitiesSlice.js"],"names":["createAsyncThunk","createSlice","UniversityService","universityService","getUniversitiesAsync","country","response","getUniversitiesByCountry","data","universitiesSlice","name","initialState","items","isLoading","reducers","add","state","action","push","payload","extraReducers","fulfilled","pending","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AAEA,MAAMC,iBAAiB,GAAG,IAAID,iBAAJ,EAA1B;AAGA,OAAO,MAAME,oBAAoB,GAAGJ,gBAAgB,CAClD,mCADkD,EAElD,OAAOK,OAAO,GAAC,QAAf,KAA4B;AAC1B,MAAGA,OAAO,KAAG,0BAAb,EAAwC;AACtC,UAAMC,QAAQ,GAAG,MAAMH,iBAAiB,CAACI,wBAAlB,CAA2C,eAA3C,CAAvB;AACF,WAAO,MAAMD,QAAQ,CAACE,IAAtB;AACC;;AACD,MAAGH,OAAO,KAAG,sDAAb,EAAoE;AAClE,UAAMC,QAAQ,GAAG,MAAMH,iBAAiB,CAACI,wBAAlB,CAA2C,gBAA3C,CAAvB;AACA,WAAO,MAAMD,QAAQ,CAACE,IAAtB;AACD;;AACD,QAAMF,QAAQ,GAAG,MAAMH,iBAAiB,CAACI,wBAAlB,CAA2CF,OAA3C,CAAvB;AACA,SAAO,MAAMC,QAAQ,CAACE,IAAtB;AACD,CAbiD,CAA7C;AAgBP,OAAO,MAAMC,iBAAiB,GAAGR,WAAW,CAAC;AAC3CS,EAAAA,IAAI,EAAE,cADqC;AAE3CC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,SAAS,EAAC;AAFE,GAF6B;AAO3CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,GAAG,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACtBD,MAAAA,KAAK,CAACJ,KAAN,CAAYM,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACD;AAHO,GAPiC;AAY3CC,EAAAA,aAAa,EAAE;AACb;AACA,KAAChB,oBAAoB,CAACiB,SAAtB,GAAkC,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACnDD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACE,OAArB,CADmD,CACrB;;AAC9BH,MAAAA,KAAK,CAACH,SAAN,GAAgB,KAAhB;AACD,KALY;AAMb,KAACT,oBAAoB,CAACkB,OAAtB,GAAgC,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACjDD,MAAAA,KAAK,CAACH,SAAN,GAAgB,IAAhB,CADiD,CAC5B;AACtB;AARY;AAZ4B,CAAD,CAArC;AAwBP,OAAO,MAAM,KAAKJ,iBAAiB,CAACc,OAA7B;AACP,eAAed,iBAAiB,CAACe,OAAjC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport UniversityService from \"../../service/UniversityService\";\r\n\r\nconst universityService = new UniversityService()\r\n\r\n\r\nexport const getUniversitiesAsync = createAsyncThunk(\r\n  \"universities/getUniversitiesAsync\",\r\n  async (country='Turkey') => {\r\n    if(country==='United States of America'){\r\n      const response = await universityService.getUniversitiesByCountry('United States')\r\n    return await response.data;\r\n    }\r\n    if(country==='United Kingdom of Great Britain and Northern Ireland'){\r\n      const response = await universityService.getUniversitiesByCountry('United Kingdom')\r\n      return await response.data;\r\n    }\r\n    const response = await universityService.getUniversitiesByCountry(country)\r\n    return await response.data;\r\n  }\r\n);\r\n\r\nexport const universitiesSlice = createSlice({\r\n  name: \"universities\",\r\n  initialState: {\r\n    items: [],\r\n    isLoading:false,\r\n\r\n  },\r\n  reducers: {\r\n    add: (state, action) => {\r\n      state.items.push(action.payload);\r\n    },\r\n  },\r\n  extraReducers: {\r\n    //get universities\r\n    [getUniversitiesAsync.fulfilled]: (state, action) => {\r\n      state.items = action.payload; //buradaki action response'dan dönen data ile ilgili\r\n      state.isLoading=false\r\n    },\r\n    [getUniversitiesAsync.pending]: (state, action) => {\r\n      state.isLoading=true //buradaki action response'dan dönen data ile ilgili\r\n    },\r\n  },\r\n});\r\n\r\nexport const {} = universitiesSlice.actions;\r\nexport default universitiesSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}